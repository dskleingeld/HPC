#include "solve.h"

//out_vector needs to be all zeros for length n_rows;
void matrix_vector_product(CompressedRowMatrix& matrix, double in_vector[], double out_vector[]){
  for (int row=0; row<matrix.n_rows; row++){
    for (int element_in_row=0; element_in_row< (matrix.row_ptr_end[row] - matrix.row_ptr_begin[row]+1); element_in_row++){
      auto flat_index = matrix.row_ptr_begin[row] + element_in_row;
      //auto column = col_ind[flat_index];
      out_vector[row] += matrix.values[flat_index] * in_vector[row];
    }
  }
}

void get_permuted_vector(const double array[], double pb[], 
                         int length, PermutationMatrix& p){
  //copy the array into pb
  for (int i=0; i<length; i++){pb[i] = array[i];}

  //create index from permutationMatrix
  int index[MAX_N_ROWS];
  for(int i=0; i<length; i++){index[i]=i;}

  for(int i=0; i<length; i++){
    auto v = p.permuted_to_original_index[i];
    auto temp = index[i];
    index[i] = index[v];
    index[v] = temp;
  }

  //permute vector b to match up LU vect.
  for(int i=0; i<length; i++){
    //pb[index[i]] = array[i];
    pb[i] = array[index[i]];
  }
}

//give na lu factord matrix with permutation matrix and a vector b 
//solves the system Ax=b
//
// PAx = Pb
// LUx = Pb
//
// Ly = Pb -> solve for y
// Ux = y -> solve for x
void solve_system(CompressedRowMatrix& lu, PermutationMatrix& p, 
                  double org_b[], double x[]){

  double pb[MAX_N_ROWS];// = {31662.232211,-8863.853358,-8059.832837,-138.470439,-0.000895,-0.000505,-731.471109,0.000845,13.738772,-0.000236,27802.883534,15440.792415,12003.808246,8154.116225,-0.000941,732.593493,10150910.941494,586752.625876,-180359.870278,-149044.351563,-3086.021757,-0.034440,0.031507,-13576.564180,0.014921,253.620154,-0.015507,516330.316778,286303.567976,236597.075648,150811.951781,-0.041799,13597.216594,92708195.343929,1449762.407680,-471364.578046,-368248.537512,-8440.212306,-0.176135,-0.001075,-33617.660908,0.077801,618.087504,-0.047974,1271450.836039,705237.102449,608087.370847,372606.298999,-0.212640,33668.208777,161561480.325743,1609877.951386,-850732.991438,-631131.213358,-15429.701198,-0.024657,-0.173213,-57618.252231,0.044812,1039.480472,-0.106740,2175621.113260,1209286.992372,910375.744817,638536.326872,2604983.086550,57703.228308,220647026.857982,-0.178750,-742656.142201,-922136.902659,-23719.379530,-0.220477,0.099509,-83858.030180,-0.098500,1482.893314,-0.210346,2171769.450284,1068160.070714,826664.111244,932787.071876,-1696634.628842,83978.712513,272380741.138876,-1220325.833270,-0.397650,-964754.616846,-32755.075797,0.449702,-0.628268,-111347.814710,-0.123487,1921.077330,-0.482922,3434991.453214,1527855.494161,749012.921827,-16001523.636100,978731.805893,111504.491114,318387055.925676,3322907.503920,1045141.429350,-1740137.027740,-80216.023310,-0.805693,-0.960370,-255030.745800,0.368890,4234.355130,-0.624660,-26446857.695530,-225579.278964,-6780546.308750,1771498.926880,-0.070610,255377.269315,570342845.786784,10209713.905810,-24257124.169550,-3792059.173700,-147467.672210,-2.956880,0.558760,-446123.189400,-0.585610,7137.062180,-0.266650,-8884393.830920,-5217338.876680,-16796988.802760,3845843.517590,-0.874400,446703.785720,820903503.712361,14268664.562800,-9325935.883500,1532800.937260,-240886.792140,3.223120,-5.364480,-703543.360600,-0.516870,10869.473100,-3.973510,-9409455.105500,-6370617.436930,-22421949.993710,-1449440.380890,36180516.138200,704436.822890,1102150332.463968,19253637.224000,-0.768500,18966933.376600,-429771.556010,-3.486350,-26.865600,-1219608.046600,-2.013500,18159.252400,-0.887500,1949511.936400,-27069914.292290,-312910.450870,-19155536.468540,100567146.603000,1221047.211960,1621117388.226338,10100872.061400,30597977.118800,0.462600,-666450.741700,9.045650,-6.449700,-1856874.489000,12.777900,26667.527500,-5.929300,30155899.392100,-16063817.822400,13580585.085190,-30978713.808770,185881175.354000,1859026.832170,2136357438.479522,-20562011.765600,40378695.207000,-6.526300,-1091743.292800,-8.843300,-55.424700,-1727505.164200,-48.944300,41336.693000,13.391800,96785286.778000,22321968.074500,48338684.386400,-40825035.455500,282131378.006000,1730815.886900,2892551689.549969,-50717532.672000,42897865.085900,-1.508900,-1731152.168300,20.142100,-57.483000,-2858384.539000,-112.999700,62609.859000,-5.836400,191358904.075800,82233594.577600,111053205.412300,-46066385.408700,383274241.000000,2863302.164700,3845535541.069468,-81833488.375000,22112305.813000,-4.010000,2378338.721300,178.474800,16.427000,-5248674.583000,54.118000,94108.688000,2.891000,317553414.438000,161730026.302000,187475437.406800,-29042392.248000,512208716.000000,5256269.859000,5060558456.765370,-137431531.856101,-57520006.156000,-3.119000,6044220.194000,-105.694000,9.906000,527920.130000,-223.318000,426297.210000,-101.156000,458825251.911000,263932038.437000,274317085.375000,39751353.242809,661205844.250000,-516993.925000,6553885633.265432,-236146179.355001,-161375825.187000,23.099000,4920747.536000,-185.297000,-834.125000,13633338.500000,203.563000,1838453.528400,-81.844000,594173303.063000,372115816.844000,359400181.818000,140098449.389600,936407176.152588,-13617814.865000,8343812165.349447,-394375252.171998,-330887892.937000,-19.651000,-3542250.375000,-584.365000,-17.250000,46300117.000000,-203.250000,4945764.704000,-333.062000,740515223.028301,478138721.000000,427630213.068000,301886907.181400,1374783180.476601,-46278570.182000,10430588678.600660,-718972801.865524,-517765048.500000,3.755000,27652633.063000,-902.625000,-1113.620000,82675253.000000,-4.120000,11355742.031610,-573.620000,850743614.557301,619341623.014034,438907941.532280,489054045.178283,2024742939.469002,-82644706.740000,12955636411.235086,-1188294227.177002,-732844926.184502,15611769.130000,-125.810000,1151.563000,-286.250000,92427279.749400,122.500000,19223919.859000,-442.500000,981308712.169800,462860281.398899,753604800.180180,703698327.957438,2961033591.811996,-91690381.090850,16040638431.692604,-1898870948.759998,-973077808.125000,-38267442.030998,1434.880000,1.000000,4358.500000,92447657.208401,-587.500000,35883347.312000,-1079.250000,1049821856.375000,526229194.047001,954665490.205799,897811579.354900,-4131955145.500000,-89926407.000000,19489902705.710300,-2879268165.880000,-1201774454.061996,-188470629.000000,-4390.500000,894.000000,87294009.812000,-218.000000,-3890.500000,61124368.619999,-1697.000000,1093538808.812000,1206788906.582998,656910482.187000,1059421199.780899,-5399461486.750000,-81409276.625000,23518798856.327801,4180014751.500000,-1466167752.182995,-463484868.000000,-8009.000000,-517.000000,2582518.937000,-110.500000,-1095.000000,96263087.500000,-3142.000000,1100560703.250000,1522598821.870003,942795732.750000,1216341067.431999,10039225.500000,-6675294346.880005,28358726631.661694,5410864845.000000,-1672026291.500000,-874656247.000000,-2737.500000,-17916.000000,-128279207.187000,-51.500000,-6215.000000,170914053.000000,-468.000000,1114876699.250000,1797891172.369995,1358313592.250000,1332734689.369003,150959814.000000,177.000000,33500600994.135231,6676221905.000000,-1943917865.000000,-1536396382.000000,8011.000000,-2108.000000,-406812097.750000,-2304.000000,222.500000,255768924.000000,4404.000000,1132502044.061996,2050507335.750000,2204801578.500000,1406190456.119995,418628548.000000,-478.000000,39914122321.526970,-7722451635.750000,-2100404079.000000,-2466241674.000000,11346.000000,7597523926.500000,-27646.000000,-776422903.000000,18252.000000,366908498.000000,350.000000,1242237984.500000,3004004119.500000,2480578270.750000,1496249181.250000,782596832.000000,12.000000,46815029382.802719,-8300272628.000000,-2217343432.500000,-3809726553.750000,-16384.000000,-16634.000000,8006462896.990515,-1245148013.000000,-3258.000000,551466384.000000,15694.000000,1315171975.500000,4375261652.750000,2798708838.062000,1473877538.250000,1249854931.867299,840.000000,54709717978.530739,-8672490123.906000,-2349322656.000000,-5535720915.500000,-45730.000000,-24098.000000,8041749599.663123,-2007270488.250000,-14044.000000,699581202.130000,-1244.000000,1494481966.312000,6136273624.687000,3134415384.213000,1497945227.500000,1838213754.312404,-1266.000000,63650695887.116501,-8552417215.000000,-2385026221.250000,-7542331466.000000,-70410.000000,15058.000000,44492.000000,-2591909633.250000,7580904523.358024,984475526.000000,-28816.000000,1548695918.000000,8204791251.500000,3391018334.100108,1444395269.717799,2428992184.151398,-1238.000000,73345875883.009323,-8679243509.281000,-2447854199.000000,-9787697162.000000,46848.000000,390.000000,-129512.000000,-3415597732.500000,7049293345.806995,1252574798.000000,5234.000000,2002120505.468000,10520049924.000000,3659171480.873064,1532527515.815660,3093665339.578003,-1028.000000,84617311522.078705,-8493089291.630001,-2297568674.000000,-11525349744.000000,-48838.000000,-83236.000000,64246.000000,-3961733058.000000,6311675807.813000,1560148509.500000,5894.000000,2239596564.370000,12221104811.750000,1252228091.734319,3840932077.954926,3623429313.906006,-2814.000000,96410449530.591995,-8636053847.500000,-2168378834.000000,-12975548854.000000,41690.000000,257110.000000,115572.000000,-4573306272.000000,5284445869.354131,1838718402.000000,137860.000000,2087591243.500000,13720668881.000000,1185225700.765930,3922122360.607941,4110880050.647283,1182.000000,110205339643.769699,-7555410768.000000,-1568449080.000000,-13235674884.000000,-39500.000000,-91710.000000,220990.000000,-4585329596.000000,3998209097.039000,1760820026.000000,-212860.000000,1812126424.500000,13877229051.500000,-367542924.434814,3453909223.790044,4072705624.353995,5226.000000,124368105226.246796,-6883893578.500000,-937414244.000000,-12953689935.796999,-544780.000000,208650.000000,493190.000000,-4478848995.500000,255280.000000,1593946734.000000,1688113398.750000,396358630.500000,13749118164.202999,-1289364526.500000,2794155381.857849,3907347793.490000,-2044.000000,140819694233.534698,-3664430378.000000,91220777.625000,-11685481754.000000,-673564.000000,-364560.000000,408510.000000,-3770158119.125000,345580.000000,1086494792.344000,-996858155.000000,-2349569829.000000,12841395583.000000,-4017388560.256400,1531109684.812000,3180411893.870000,6500.000000,157502661905.782288,-330579179.000000,973672462.000000,-10530904269.000000,-722156.000000,233040.000000,-1371450.000000,-3172292140.000000,-572590.000000,184956780.562000,-3010585243.000000,-4838835078.000000,12535437651.000000,-6796139169.228516,418991413.689824,2508620847.437000,4382.000000,176683386024.156311,4711212845.653076,2313790747.835900,-8894188076.000000,131816.000000,838900.000000,-757840.000000,-2120088939.250000,1143810.000000,-998853786.906000,-6347091420.500000,-9144997645.580383,11972388160.000000,-9992335403.516001,-1021678503.485840,1329203750.000000,-220.000000,195813269416.690002,12000127167.450199,4215120335.437000,-7666303616.000000,-4757960.000000,2441700.000000,1132550.000000,-1469819435.354490,23000.000000,-2993390866.313000,-9960689091.718800,-15836418767.909201,13026175860.000000,-15399656587.469000,-2501586420.422000,435347996.273400,-54020.000000,217429910169.114014,21215489249.773399,6994537505.156000,-5975726812.000000,827320.000000,-6826000.000000,5002400.000000,-348918236.633790,3061700.000000,-5206546103.250000,-14903107953.476601,-23814946392.949200,14503420241.695581,-21760060396.318001,-3996710503.438000,-963151770.000000,-24970.000000,238951333250.250000,32632553995.327442,10704675736.500000,-4532699788.000000,928630.000000,-4387200.000000,200300.000000,920809709.859000,-4167500.000000,-8651332651.500000,-19889101569.813000,-34745404039.719002,19216969994.359501,-29747677425.250000,-4914852301.910530,-2140160316.000000,-27940.000000,261515246776.437988,43758658716.869102,14499865674.000000,-2347061171.500000,-282730.000000,255000.000000,-8752100.000000,3581227270.620000,-4758500.000000,-12772046793.000000,-26111545436.570301,-45194952276.750000,27249518225.567001,-35446912785.500000,-4244127027.662109,-4001227121.437500,52830.000000,283986966235.687988,43879841139.594002,15331689070.000000,-1131688334.250000,-26727800.000000,-13654000.000000,-13188000.000000,6693159682.000000,7914000.000000,-16615890066.000000,-28286647532.000000,-51843074542.000000,49087640158.250000,-29860351228.000000,6477778979.914000,-5134589845.000000,-377800.000000,305307416155.937988,3890943246.000000,4552984696.000000,-3725998544.000000,34721900.000000,-58077000.000000,37866000.000000,6569844576.750000,-49861000.000000,-13941419080.000000,-17338129310.000000,-39942586884.000000,116476550038.000000,16033140010.000000,51387853555.000000,-2532066882.000000,-465000.000000,323146080353.875000,-150046958670.000000,-40369304830.000000,-18643970300.000000,-96829000.000000,157190000.000000,64960000.000000,-12388206692.000000,128570000.000000,1681911290.000000,43095519656.000000,17932939348.000000,421424371884.000000,224685022842.000000,202119645806.000000,17332347165.500000,-10408000.000000,332256199091.630005,-1246275434910.000000,-747744335840.000000,-232617072290.000000,339500000.000000,652600000.000000,-1590400000.000000,-459371232838.000000,1012117141139.000000,18842486080.000000,-721000000.000000,442124409512.000000,6454233071330.000000,4066105139480.000000,1430690876011.000000,-124500000.000000,461914002946.000000,307868156734.250000,-6577555000000.000000,-6144456000000.000000,-683313000000.000000,-2864000000.000000,6553000000.000000,-5125000000.000000,-3044134000000.000000,5751729000000.000000,17387000000.000000,-1404000000.000000,3756458000000.000000,25684243000000.000000,452000000.000000,25443208000000.000000,6681311000000.000000,3046412000000.000000,287872794577.000000};
  double c[MAX_N_ROWS];
  //permute vector b to match up LU vect.
  get_permuted_vector(org_b, pb, lu.n_rows, p);

  double temp, temp2;
  for(int i = 0; i < lu.n_rows; i++){
    temp = 0;
    for(int j = lu.row_ptr_begin[i]; j < lu.row_ptr_end[i]; j++){
      if(lu.col_ind[j] < i) temp += lu.values[j]*c[lu.col_ind[j]];
      else break;
    }
    c[i] = pb[i] - temp;
  }

  for(int i = lu.n_rows-1; i >= 0; i--){
    temp = 0;
    temp2 = 0;
    for(int j = lu.row_ptr_end[i]; j >= lu.row_ptr_begin[i]; j--){
      if(lu.col_ind[j] == i) {
        temp2 = lu.values[j];
        break;
      }
      else if(lu.col_ind[j] > i)
        temp += x[lu.col_ind[j]]*lu.values[j];
      else break;
    }
    x[i] = (c[i] - temp) / temp2;
  }



    //forward subsitution, solves y from Ly=Pb
    /*for(int row=0; row<lu.n_rows; row++){
        c[row] = pb[row];

        //iterate over all columns of A
        //if A[] is zero nothing happens to c =>
        //we only need to iterate the nonzero elements
        //for(int column=0; column<row-1; column++){
        for(int flat_idx=lu.row_ptr_begin[row]; 
            flat_idx<=lu.row_ptr_end[row]; flat_idx++){

            //only iterate till column<row-1
            auto column = lu.col_ind[flat_idx];
            if(column>row-1){break;}

            auto A = lu.values[flat_idx];
            c[row] -= A * c[column];
        }
    }

    //back subsitution, solves x from Ux=y
    for(int row = lu.n_rows-1; row>=0; row--){
        x[row] = c[row];
        //iterate over all columns of A
        //if A[] is zero nothing happens to c =>
        //we only need to iterate the nonzero elements
        //for(int column=row+1; column<row; column++){
        
        //find first non zero element in row of A starting at column row+1
        for (int flat_idx=lu.row_ptr_begin[row]; flat_idx<lu.row_ptr_end[row]; flat_idx++){
          //only truely start iterating over columns once we are past column row+1
          if (lu.col_ind[flat_idx]<row+1){ continue; }

          double A = lu.values[flat_idx];
          auto column = lu.col_ind[flat_idx];
          x[row] -= A * x[column];
        }
        double A;
        int flat_idx;
        if (find_column(lu,row,row,flat_idx)){
          A = lu.values[flat_idx];
        } else {
          dbg(row);
          A = 1.; 
        }
        x[row] = x[row] / A;
    }*/
}

void print_perm(PermutationMatrix& p, const size_t length){
  std::cout<<"[ ";
  for(size_t i = 0; i<length; i++){
    printf(" %d",p.permuted_to_original_index[i]);
  }
  std::cout<<"]"<<std::endl;
}

void print_array(const double a[], const size_t length){
  std::cout<<"[ ";
  size_t i = 0;
  for (; i<length-4; i+=4){
    printf(" %.8e %.8e %.8e %.8e\n", a[i], a[i+1], a[i+2], a[i+3]);
  }
  std::cout<<" ";
  for (; i<length; i++){
    printf("%.8e", a[i]);
  }
  std::cout<<"]"<<std::endl;
}

void print_array(const double array[], const size_t length, PermutationMatrix& p){

    double pb[MAX_N_ROWS];
    get_permuted_vector(array, pb, length, p);

    std::cout<<"[ ";
    int i = 0;
    for (; i<(int)length-4; i+=4){
      printf(" %.8e %.8e %.8e %.8e\n", pb[i], pb[i+1], pb[i+2], pb[i+3]);
    }
    std::cout<<" ";
    for (; i<length; i++){
      printf(" %.8e", pb[i]);
    }
    std::cout<<"]"<<std::endl;
}


